[[chapter_elliptic_curve_cryptography]]
== Elliptic Curve Cryptography

[.lead]
The previous two chapters covered some fundamental math.
We learned how Finite Fields work and we also learned what an Elliptic Curve is.
In this chapter, we're going to combine the two concepts to learn Elliptic Curve Cryptography.
Specifically, we're going to build the primitives needed to sign and verify messages, which is at the heart of what Bitcoin does.

=== Elliptic Curves over Reals

We discussed in <<chapter_elliptic_curves>> what an Elliptic Curve looks like visually because we were plotting the curve over _real_ numbers.
Specifically, it's not just integers or even rational numbers, but all _real_ numbers.
Pi, sqrt(2), e+7th root of 19, etc are all part of real numbers.

This worked because _real_ numbers are also a field.
Note unlike a _finite_ field, there are an _infinite_ number of real numbers, but otherwise the same properties hold:

1. If *a* and *b* are in the set, *a+b* and *a⋅b* are in the set.
2. The additive identity, *0* exists and has the property *a + 0 = a*.
3. The multiplicative identity, *1* exists and has the property *a ⋅ 1 = a*.
4. If *a* is in the set, *-a* is in the set, which is defined as the value that makes *a + (-a) = 0*.
5. If *a* is in the set and is not 0, *a^-1^* is in the set, which is defined as the value that makes *a ⋅ a^-1^ = 1*.

Clearly, all of these are true as normal addition and multiplication apply for the first part, additive and multiplicative identities 0 and 1 exist, -x is the additive inverse and 1/x is the multiplicative inverse.

Real numbers are easy to plot and we can see the a graph over reals visually.
For example, y^2^=x^3^+7 can be plotted like Figure 3-1:

.secp256k1 over real numbers
image::images/elliptic3.png[secp256k1 Curve]

It turns out we can use the point addition equations over any field, including the Finite Fields we learned in <<chapter_finite_fields>>.
The only difference is that we have to use the addition/subtraction/multiplication/division as defined in <<chapter_finite_fields>>, not the "normal" versions that the real numbers use.

=== Elliptic Curves over Finite Fields

So what does an Elliptic Curve over a Finite Field look like?
Let's look at the equation y^2^=x^3^+7 over F~103~.
We can verify that the point (17,64) is on the curve by calculating both sides of the equation:

* y^2^=64^2^%103=79
* x^3^+7=(17^3^+7)%103=79

We've verified that the point is on the curve using Finite Field math.

Because we're evaluating the equation over a Finite Field, the plot of the equation looks vastly different (Figure 3-2):

.Elliptic Curve over a Finite Field
image::images/finitefieldellipticcurve.png[Elliptic Curve over a Finite Field]

As you can see, it's very much a scattershot of points and there's no smooth curve here.
This is not surprising since the points are discrete.
About the only pattern is that the curve is symmetric right around the middle, which is due to the y^2^ term.
The graph is not symmetric over the x-axis as in the curve over reals, but about half-way up the y-axis due to there not being negative numbers in a Finite Field.

What's amazing is that we can use the same point addition equations with the addition, subtraction, multiplication, division and exponentiation as we defined them for Finite Fields and everything still works.
This may seem surprising, but abstract math has regularities like this despite being different than the traditional modes of calculation you may be familiar with.

include::code-ch03/answers.py[tag=exercise1,indent=0]

=== Coding Elliptic Curves over Finite Fields

Because we defined an Elliptic Curve point and we defined the `+`, `-` ,`*` and `/` operators for Finite Fields, we can combine the two classes to create Elliptic Curve points over a Finite Field.

[source,python]
----
include::code-ch03/examples.py[tag=example1]
----

When initializing `Point`, we will run through this part of the code:

[source,python]
----
include::code-ch03/ecc.py[tag=source1]
----

The addition (`+`), multiplication (`*`), exponentiation (`**`) and equality (`!=`) here use the `__add__`, `__mul__`, `__pow__` and `__ne__` methods from `FiniteField` respectively and _not_ the integer equivalents.
Being able to do the same equation but with different definitions for the basic arithmetic operators is how we construct an Elliptic Curve Cryptography library.

We've already coded the two classes that we need to implement Elliptic Curve points over a Finite Field.
However, to check our work, it will be useful to create a test suite.
We will do this using the results of Exercise 2.

[source,python]
----
include::code-ch03/ecc.py[tag=source2]
----
<1> We pass in `FieldElement` objects into the `Point` class for initialization.
This will, in turn, use all the overloaded math operations in `FieldElement`

We can now run this test like so:

[source,python]
----
>>> import ecc
>>> from helper import run  # <1>
>>> run(ecc.ECCTest('test_on_curve'))
.
----------------------------------------------------------------------
Ran 1 test in 0.001s

OK
----
<1> `helper` is a module with some very useful utility functions, including the ability to run unit tests individually.

=== Point Addition over Finite Fields

We can use all the same equations over Finite Fields, including the linear equation:

y=mx+b

It turns out that a "line" in a Finite Field is not quite what you'd expect (Figure 3-3):

.Line over a Finite Field
image::images/linefinitefield.png[Line over a Finite Field]

The equation nevertheless works and we can calculate what `y` should be for a given `x`.

Remarkably, point addition works over Finite Fields as well.
This is because the Elliptic Curve point addition works over all fields!
The same exact formulas we used to calculate point addition over reals work over Finite Fields.
Specifically:

when x~1~≠x~2~:

* P~1~=(x~1~,y~1~), P~2~=(x~2~,y~2~), P~3~=(x~3~,y~3~)
* P~1~+P~2~=P~3~
* s=(y~2~-y~1~)/(x~2~-x~1~)
* x~3~=s^2^-x~1~-x~2~
* y~3~=s(x~1~-x~3~)-y~1~

when P~1~=P~2~:

* P~1~=(x~1~,y~1~), P~3~=(x~3~,y~3~)
* P~1~+P~1~=P~3~
* s=(3x~1~^2^+a)/(2y~1~)
* x~3~=s^2^-2x~1~
* y~3~=s(x~1~-x~3~)-y~1~

All of the equations for Elliptic Curves work over Finite Fields and that sets us up to create some cryptographic primitives.

=== Coding Point Addition over Finite Fields

Because we coded FieldElement in such a way as to define `__add__`, `__sub__`, `__mul__`, `__truediv__`, `__pow__`, `__eq__` and `__ne__`, we can simply initialize `Point` with `FieldElement` objects and point addition will work:

[source,python]
----
include::code-ch03/examples.py[tag=example3]
----

include::code-ch03/answers.py[tag=exercise2,indent=0]

include::code-ch03/answers.py[tag=exercise3,indent=0]

=== Scalar multiplication for Elliptic Curves

Because we can add a point to itself, we can introduce some new notation:

(170,142) + (170,142) = 2⋅(170,142)

Similarly, because we have associativity, we can actually add the point again:

2⋅(170,142) + (170,142) = 3⋅(170, 142)

We can do this as many times as we want.
This is what we call Scalar Multiplication.
That is, we have a _scalar_ number in front of the point.
We can do this because we have defined point addition and point addition is associative.

One property of scalar multiplication is that it's really hard to predict without calculating (see Figure 3-4):

.Scalar Multiplication Results for y^2^=x^3^+7 over F~223~ for point (170,142)
image::images/scatterplot.png[Scalar Multiplication Results]

Each point is labeled by how many times we've added the point.
You can see that this is a complete scattershot.
This is because point addition is non-linear and not easy to calculate.
Performing scalar multiplication is straightforward, but doing the opposite, Point division, is not.

This is called the Discrete Log problem and is the basis of Elliptic Curve Cryptography.

Another property of scalar multiplication is that at a certain multiple, we get to the point at infinity (remember, point at infinity is the additive identity or 0).
If we imagine a point G and scalar multiply until we get the point at infinity, we end up with a set:

{ G, 2G, 3G, 4G, ... nG } where nG=0

It turns out that this set is called a Group and because `n` is finite, we have a Finite Group (or more specifically a Finite Cyclic Group).
Groups are interesting mathematically because they behave a lot like addition:

G+4G=5G or aG+bG=(a+b)G

When we combine the fact that scalar multiplication is easy to go in one direction but hard in the other and the mathematical properties of a Group, we have exactly what we need for Elliptic Curve Cryptography.

.Why is this called the Discrete Log Problem?
****
You may be wondering why the problem of reversing scalar *multiplication* is referred to as the discrete *log* problem.

We called the operation between the points "addition", but we could easily have called it a point "operation".
Typically, a new operation that you define in math is denoted with the dot operator (⋅).
The dot operator is also used for multiplication, and it sometimes helps to think that way:

P~1~⋅P~2~=P~3~

When you do lots of multiplying, that's the same as exponentiation.
Scalar multiplication when we called it "point addition" becomes scalar exponentiation when thinking "point multiplication":

P^7^=Q

The Discrete Log problem in this context is the ability to reverse the above equation, which ends up being:

log~P~Q=7

The log equation on the left has no analytically calculable algorithm.
That is, there is no known formula that you can plug in to get the answer generally.
This is all a bit confusing, but it's fair to say that we could call the problem the "Discrete Point Division" problem instead of the Discrete Log problem.
****

include::code-ch03/answers.py[tag=exercise4,indent=0]

=== Scalar Multiplication Redux

Scalar Multiplication is adding the same point to itself some number of times.
The key making scalar multiplication into Public Key Cryptography is the fact that scalar multiplication on Elliptic Curves is very hard to reverse.
Note the previous exercise.
Most likely, you calculated the point s⋅(47,71) in F~223~ for `s` from 1 until 21.
Here are the results:

[source,python]
----
include::code-ch03/examples.py[tag=example4]
----

If we look closely at the numbers, there's no real discernible pattern to the scalar multiplication.
The x-coordinates don't always increase or decrease and neither do the y-coordinates.
About the only pattern is that between 10 and 11, the x-coordinates are equal (10 and 11 have the same x, as do 9 and 12, 8 and 13 and so on).
This is due to the fact that 21⋅(47,71)=0.

Scalar multiplication looks really random and that's what gives this equation *asymmetry*.
An *asymmetric* problem is one that's easy to calculate in one direction, but hard to reverse.
For example, it's easy enough to calculate 12⋅(47,71).
But if we were presented this:

s⋅(47,71)=(194,172)

Would you be able to solve for `s`?
We can look up the table above, but that's because we have a small group.
We'll see later that when we have numbers that are a lot larger, Discrete Log becomes an intractable problem.

=== Mathematical Groups

The preceding math (Finite Fields, Elliptic Curves, combining the two), was really to bring us to this point.
What we really want to generate for the purposes of Public Key Cryptography are Finite Cyclic Groups and it turns out that if we take a Generator Point from an Elliptic Curve over a Finite Field, we can generate a Finite Cyclic Group.

Unlike fields, groups have only a single operation.
In our case, Point Addition is our operation.
We also have a few other properties like closure, invertibility, commutativity and associativity.
Lastly, we need the identity.

Let's look at each property.

==== Identity

If you haven't guessed by now, the identity is defined as the point at infinity, which is guaranteed to be in the group since we generate the group when we get to the point at infinity.
So:

0 + A = A

We call 0 the point at infinity because visually, it's the point that exists to help the math work out (Figure 3-5):

.Vertical Line "intersects" a third time at the point at infinity
image::images/intersect2-1.png[Vertical Line]

==== Closure

This is perhaps the easiest to prove since we generated the group in the first place by adding G over and over.
Thus, two different elements look like this:

aG + bG

We know that the result is going to be:

(a+b)G

How do we know if this element is in the group?
If `a+b < n` (where `n` is the order of the group), then we know it's in the group by definition.
If `a+b >= n`, then we know `a < n` and `b < n`, so `a+b<2n` so `a+b-n<n`.

(a+b-n)G=aG+bG-nG=aG+bG-0=aG+bG

More generally (a+b)G=((a+b)%n)G where n is the order of the group.

So we know that this element is in the group, proving closure.

==== Invertibility

Visually, invertibility is easy to see (Figure 3-6):

.Each point is invertible by taking the reflection over the x-axis
image::images/intersect2-1.png[Vertical Line]

Mathematically, we know that if aG is in the group, (n-a)G is also in the group.
You can add them together to get aG+(n-a)G=(a+n-a)G=nG=0.

==== Commutativity

We know from Point Addition that A+B=B+A (Figure 3-7):

.The Line through the points doesn't change
image::pointaddition.png[Point Addition]

This means that aG+bG=bG+aG, which proves commutativity.

==== Associativity

We know from Point Addition that A+(B+C)=(A+B)+C (see Figure 3-8 and 3-9)

.(A+B)+C
image::associativity1.png[Case 1]
.A+(B+C)
image::images/associativity2.png[Case 2]

Thus, aG+(bG+cG)=(aG+bG)+cG proving associativity.

include::code-ch03/answers.py[tag=exercise5,indent=0]

=== Coding Scalar Multiplication

What we're trying to do with the last exercise is this:

[source,python]
----
include::code-ch03/examples.py[tag=example5]
----

We want to be able to scalar multiply the point with some number.
Thankfully, there's a method in Python called `__rmul__` that can be used to override the front multiplication.
A naive implementation looks something like this:

[source,python]
----
class Point:
    ...
    def __rmul__(self, coefficient):
        product = self.__class__(None, None, self.a, self.b) # <1>
        for _ in range(coefficient): # <2>
            product += self
        return product
----
<1> We start the `product` at 0, which in the case of Point Addition is the point at infinity.
<2> We loop `coefficient` times and add the point each time

This is fine for small coefficients, but what if we have a very large coefficient?
That is, a number that's so large that we won't be able to get out of this loop in a reasonable amount of time?
For example, a coefficient of 1 trillion is going to take a really long time.

There's a really cool technique called binary expansion that allows us to perform multiplication in `log2(n)` loops, which dramatically reduces the calculation time for large numbers.
For example, 1 trillion is 40 bits in binary, so we only have to loop 40 times for a number that's generally considered very large.

[source,python]
----
class Point:
    ...
include::code-ch03/ecc.py[tag=source3]
----
<1> `current` represents the point that's at the current bit.
First time through the loop it represents 1*self, the second time, it will be 2*self, third time, 4*self, then 8*self and so on.
We double the point each time.
In binary the coefficients are 1, 10, 100, 1000, 10000, etc.
<2> We start the result at 0, or the point at infinity.
<3> We are looking at whether the right-most bit is a 1.
If it is, then we add the value of the current bit.
<4> We need to double the point until we're past how big the coefficient can be.
<5> We bit shift the coefficient to the right.

This is an advanced technique and if you don't understand bitwise operators, think of representing the coefficient in binary and only adding the point where there are 1's.

With `__add__` and `__rmul__`, we can start defining some more complicated Elliptic Curves.

=== Defining the curve for Bitcoin

While we've been using relatively small primes for the sake of examples, we are not restricted to such small numbers.
Small primes mean that we can use a computer to search through the entire Group.
If the group has a size of 301, the computer can easily do 301 computations to reverse scalar multiplication or break Discrete Log.

But what if we made the prime larger?
It turns out that we can choose much larger primes than we've been using.
The security of Elliptic Curve Cryptography depends on computers *not* being able to go through the an appreciable fraction of the group.

An Elliptic Curve for Public Key Cryptography is defined with the following parameters:

* We specify the `a` and `b` of the curve y^2^=x^3^+ax+b.
* We specify the prime of the Finite Field, `p`.
* We specify the `x` and `y` coordinates of the generator point G
* We specify the order of the group generated by G, `n`.

These numbers are known publicly and together form the cryptographic curve.
There are many cryptographic curves and they have different security/convenience trade-offs, but the one we're most interested in is the one Bitcoin uses: secp256k1.
The parameters for secp256k1 are these:

* `a = 0`, `b = 7`, making the equation y^2^=x^3^+7
* p = 2^256^-2^32^-977
* G~x~ =

`0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798`

* G~y~ =

`0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8`

* n =

`0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141`

G~x~ refers to the x-coordinate of the point G and G~y~ the y-coordinate.
The numbers starting with `0x` indicate a hexadecimal number.

There are a few things to notice about this curve.

First, the equation is relatively simple.
Many curves have `a` and `b` that are much bigger.
secp256k1 has a really simple equation.

Second, `p` is really, really close to 2^256^.
This means that most numbers under 2^256^ are in the prime field and thus, any point on the curve has x and y-coordinates that are expressible in 256-bits each.
`n` is also very close to 2^256^.
This means any scalar multiple can also be expressed in 256 bits.

Third, 2^256^ is a really big number (See the _How Big is 2^256^_).
Amazingly, any number below 2^256^ can be stored in 32 bytes.
This means that we can store the private key relatively easily.

.How Big is 2^256^?
****
2^256^ doesn't seem that big because we can express it succinctly, but in reality, it is an enormous number.
To give you an idea, here are some relative scales:

2^256^ ~ 10^77^

 * Number of atoms in and on earth ~ 10^50^
 * Number of atoms in the solar system ~ 10^57^
 * Number of atoms in the Milky Way ~ 10^68^
 * Number of atoms in the universe ~ 10^80^

A trillion (10^12^) computers doing a trillion computations every trillionth (10^-12^) of a second for a trillion years is still less than 10^56^ computations.

Think of finding a private key this way.
There are as many possible private keys in Bitcoin as there are atoms in a billion galaxies.
****

==== Working with secp256k1

Since we know all of the parameters for secp256k1, we can verify in Python whether the generator point, G, is on the curve y^2^=x^3^+7:

[source,python]
----
include::code-ch03/examples.py[tag=example6]
----

Furthermore, we can verify in Python whether the generator point, G, has the order `n`.

[source,python]
----
include::code-ch03/examples.py[tag=example7]
----

Since we know the curve we will work in, this is a good time to create a subclass in Python to work exclusively with the parameters for secp256k1.
We'll define the equivalent `FieldElement` and `Point` objects, but specific to the secp256k1 curve.
Let's start by defining the field we'll be working in.

[source,python]
----
include::code-ch03/ecc.py[tag=source4]
...
include::code-ch03/ecc.py[tag=source5]
----

We're subclassing the `FieldElement` class so we don't have to pass in `P` all the time.
We also want to display a 256-bit number consistently by filling 64 characters so we can see any leading zeroes.

Similarly, we can define a point on the secp256k1 curve and call it `S256Point`.

[source,python]
----
include::code-ch03/ecc.py[tag=source6]
...
include::code-ch03/ecc.py[tag=source7]
----
<1> In case we initialize with the point at infinity, we need to let x and y through directly instead of using the `S256Field` class.

We now have an easier way to initialize a point on the secp256k1 curve, without having to define the a and b every time like we have to with the `Point` class.

We can also define `__rmul__` a bit more efficiently since we know the order of the group, `n`.
Since we're coding Python, we'll name this with a capital `N` to make it clear that `N` is a constant.

[source,python]
----
include::code-ch03/ecc.py[tag=source9]
...
class S256Point(Point):
    ...
include::code-ch03/ecc.py[tag=source8]
----
<1> We can mod by `n` because nG=0.
That is, every `n` times we cycle back to zero or the point at infinity.

We can now define G directly and keep it around since we'll be using it a lot going forward.

[source,python]
----
include::code-ch03/ecc.py[tag=source10]
----

Now checking that the order of G is `n` is trivial:

[source,python]
----
include::code-ch03/examples.py[tag=example8]
----

=== Public Key Cryptography

Finally, we have the tools that we need to do Public Key Cryptography operations.
The key operation that we need is `P=eG` which is an *asymmetric* equation.
We can easily compute P when we know `e` and G, but we cannot easily compute `e` when we know P and G.
This is the Discrete Log Problem described earlier.

The difficulty of Discrete Log will be essential to understanding signing and verification algorithms.

Generally, we call `e` the Private Key and P the Public Key.
We'll note here that the private key is a single 256-bit number and the public key is a coordinate `(x,y)` where `x` and `y` are _each_ 256-bit numbers.

=== Signing and Verification

To set up the motivation for why signing and verification exists, imagine this scenario.
You want to prove that you are a really good archer, like at the level where you can hit any target you want within 500 yards as opposed to being able to hit any single target.

Now if someone could observe you and interact with you, proving this would be easy.
Perhaps they would position your son 400 yards away with an apple on his head and challenge you to hit that apple with an arrow.
You, being a very good archer, do this and prove your expertise.
The target, if specified by the challenger, makes your archery skill easy to verify.

Unfortunately, this doesn't scale very well.
If, for example you wanted to prove this to 10 people, you would have to shoot 10 different arrows at 10 different targets from 10 different challenges.
You could try to do something like have 10 people watch you shoot a single arrow, but since they can't all choose the target, they can never be sure that you're not just good at hitting one particular target instead of an arbitrary target.
What we want is something that you can do once, requires no interaction but still proves that you are indeed, a good archer that can hit _any_ target.

If, for example, you shot an arrow into a target of your choosing, then the people observing afterwards won't necessarily be convinced.
After all, you may be a sneaky person that paints the target around wherever your arrow happened to land.
So what can you do?

Here's a very clever thing you can do.
Inscribe the tip of the arrow with the position of the target that you're hitting ("apple on top of my son's head") and then hit that target with your arrow.
Now anyone seeing the target can take an x-ray machine and look at the tip of the embedded arrow and see that the tip indeed says exactly where it was going to hit.
The tip clearly had to be inscribed before the arrow was shot, so this can prove you are indeed a good archer (provided the actual target isn't just one that you've practiced over and over).

This is the same technique we're using with signing and verification, except what we're proving isn't that we're good archers, but that we know a secret number.
We want to prove possession of the secret without revealing the secret itself.
We do this by putting the target into our calculation and hitting that target.

Ultimately this is going to be used in Transactions which will prove that the rightful owners of the secrets are spending the Bitcoins.

==== Inscribing the Target

The inscribing of the target depends on the _signature algorithm_, and in our case, our signature algorithm is called Elliptic Curve Digital Signature Algorithm, or ECDSA for short.

The secret in our case is `e` satisfying:

eG = P

Where P is the public key and `e` is the private key.

The target that we're going to aim at is a random 256-bit number, `k`.
We then do this:

kG = R

R is our target that we're aiming for.
In fact, we're only going to care about the x-coordinate of R, which we'll call `r`.
You may have guessed already that `r` here stands for random.

We claim at this point that the following equation is equivalent to the Discrete Log Problem:

uG+vP=kG where `k` was chosen randomly and `u,v≠0` can be chosen by the signer and G and P are known

This is due to the fact that:

uG+vP=kG implies vP=(k-u)G

Since `v≠0`, we can divide by the scalar multiple `v`.

P=((k-u)/v)G

If we know `e`, we have:

eG=((k-u)/v)G or e = (k-u)/v

This means than any `(u,v)` combination that satisfies the above equation will suffice.

If we don't know `e`, we would have to play with `(u,v)` until` e = (k-u)/v`.
If we could solve this with any `(u,v)` combination, that would mean we'll have solved P=eG while knowing only P and G.
In other words, we'd have broken the Discrete Log problem.

This means to provide a correct `u` and `v`, we either have to break the Discrete Log problem or we know the secret `e`.
Since we assume Discrete Log is hard, we can say `e` is assumed to be known by the one who came up with `u` and `v`.

One subtle thing that we haven't talked about is that we have to incorporate the purpose of our shooting.
This is a contract that gets fulfilled as a result of the shooting at the target.
William Tell, for example, was shooting so that he could save his son (shoot the target and you get to save your son).
You can imagine there would be other reasons to hit the target and the "reward" that the person hitting the target would receive.
This has to be incorporated into our equations.

In signature/verification parlance, this is called the *signature hash*.
A hash is a deterministic function that takes arbitrary data into a data of fixed size.
This is a fingerprint of the message containing the intent of the shooter that anyone verifying the message already knows.
We denote this with the letter `z`.
This is incorporated into our uG+vP calculation this way:

u = z/s, v = r/s

Since r is used in the calculation of `v`, we now have the tip of the arrow inscribed.
We also have the intent of the shooter incorporated into `u`, so both the reason for shooting and the target that is being aimed at are now a part of the equation.

To make the equation work, we can calculate `s`:

* uG+vP=R=kG
* uG+veG=kG
* u+ve=k
* z/s+re/s=k
* (z+re)/s=k
* s=(z+re)/k

This is the basis of the signature algorithm and the two numbers in a signature are `r` and `s`.

Verification is straightforward:

* uG+vP where u,v≠0
* uG+vP=(z/s)G+(re/s)G=((z+re)/s)G=((z+re)/((z+re)/k))G=kG=(r,y)

[WARNING]
.Why We Don't Reveal `k`
====
At this point, you might be wondering why we don't reveal `k` and instead reveal the x-coordinate of R or `r`.
If we were to reveal `k`, then:

* uG+vP=R
* uG+veG=kG
* kG-uG=veG
* (k-u)G = veG
* (k-u) = ve
* (k-u)*1/v = e

Means that our secret would be revealed, which would defeat the whole purpose of the signature.
We can, however, reveal R.

It's worth mentioning again, make sure you're using truly random numbers for `k`, as even accidentally revealing `k` for a known signature is the equivalent of revealing your secret and losing your funds!
====

==== Verification in-depth

Signatures sign some fixed-length value (our "contract"), in our case something that's 32 bytes.
The fact that 32 bytes is 256 bits is not a coincidence as the thing we're signing will be a scalar for `G`.

In order to guarantee that the thing we're signing is 32 bytes, we hash the document first.
In Bitcoin, the hashing function is hash256, or two rounds of sha256.
This guarantees the thing that we're signing is exactly 32 bytes.
We will call the result of the hash, the signature hash, or `z`.

The signature that we are verifying has two components, (r, s).
The `r` is as above, it's the x-coordinate of some point R that we'll come back to.
The formula for `s` is as above:

s = (z+re)/k

Keep in mind that we know `e` (P = eG, or what we're proving we know in the first place), we know `k` (kG = R, remember?) and we know `z`.

We will now construct R=uG+vP by defining `u` and `v` this way:

* u = z/s
* v = r/s

Thus:

uG + vP = (z/s)G + (r/s)P = (z/s)G + (re/s)G = ((z+re)/s)G

We know s = (z+re)/k so:

uG + vP = ( (z+re) / ((z+re)/k) )G = kG = R

We've successfully chosen `u` and `v` in a way as to generate R as we intended.
Furthermore, we used `r` in the calculation of `v` proving we knew what R should be.
The only way we could know the details of R beforehand is if we know `e`.

To whit, here are the steps:

1. We are given (r, s) as the signature, `z` as the hash of the thing being signed and P, the public key (or public point) of the signer.
2. We calculate u = z/s, v = r/s
3. We calculate uG + vP = R
4. If R's `x` coordinate equals `r`, the signature is valid.

[NOTE]
.Why two rounds of sha256?
====
The calculation of `z` requires two rounds of sha256, or hash256.
You may be wondering why there are two rounds when only 1 is necessary to get a 256-bit number.
The reason is for security.

There is a well-known hash collision attack on sha1 called a _birthday attack_ which makes finding collisions much easier.
Google found a sha1 collision using some modifications of a birthday attack and a lot of other things in 2017 (https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html).
Using sha1 twice, or double-sha1 is the way to defeat slow down some forms of this attack.

Two rounds of sha256 don't necessarily prevent all possible attacks, but doing two rounds is a defense against some potential weaknesses.
====

==== Verifying a Signature

We can now verify a signature using some of the primitives that we have.

[source,python]
----
include::code-ch03/examples.py[tag=example9]
----
<1> Note that we use Fermat's Little Theorem for 1/s, since `n` is prime.
<2> u = z/s
<3> v = r/s
<4> uG+vP = (r,y).
We need to check that the x-coordinate is r

include::code-ch03/answers.py[tag=exercise6,indent=0]

==== Programming Signature Verification

We already have a class `S256Point` which is the public point for the private key.
We create a `Signature` class that houses the `r` and `s` values:

[source,python]
----
include::code-ch03/ecc.py[tag=source11]
----

We will be doing more with this class in <<chapter_serialization>>.

We can write the `verify` method on `S256Point` based on the above.

[source,python]
----
class S256Point(Point):
    ...
include::code-ch03/ecc.py[tag=source12]
----
<1> `s_inv` (1/s) is calculated using Fermat's Little Theorem on the order of the group `n` which is prime.
<2> u = z/s.
Note that we can mod by `n` as that's the order of the group.
<3> v = r/s.
Note that we can mod by `n` as that's the order of the group.
<4> uG+vP should be R
<5> We check that the x-coordinate is `r`

So given a public key, which is a point on the secp256k1 curve and a signature hash, `z`, we can verify whether a signature is valid or not.

==== Signing In-depth

Given that we know how verification should work, signing is straightforward.
The only missing step is figuring out what `k`, and thus R=kG to use.
We do this by choosing a random `k`.

Signing Procedure:

1. We are given `z` and know `e` such that eG=P.
2. Choose a random `k`
3. Calculate R=kG and r=x-coordinate of R
4. Calculate s = (z+re)/k
5. Signature is (r,s)

Note that the pubkey `P` has to be transmitted to whoever wants to verify and `z` must be known by the verifier.
We'll see later that `z` is computed and P is sent along with the signature.

==== Creating a Signature

We can now create a signature using some of the primitives that we have.

[WARNING]
====
Note that using something like the `random` library from Python to do cryptography is generally not a good idea.
This library is for teaching purposes only, so please don't use any of the code explained to you here for production purposes.
====

[source,python]
----
include::code-ch03/examples.py[tag=example10]
----
<1> This is an example of a "brain wallet" which is a way to keep the private key in your head without having to memorize something too difficult.
Please don't use this for a real secret.
<2> This is the signature hash, or hash of the message that we're signing.
<3> We're going to use a fixed `k` here for demonstration purposes.
<4> kG = (r,y) so we take the `x` coordinate only
<5> s = (z+re)/k.
We can mod by `n` because we know this is a cyclical group of order `n`.
<6> The public point needs to be known by the verifier

include::code-ch03/answers.py[tag=exercise7,indent=0]

==== Programming Message Signing

In order to program message signing, we now create a `PrivateKey` class which will house our secret.

[source,python]
----
include::code-ch03/ecc.py[tag=source13]
----
<1> We keep around the public key, `self.point`, for convenience.

We now create the `sign` method.

[source,python]
----
from random import randint
...
class PrivateKey:
...
    def sign(self, z):
        k = randint(0, N)  # <1>
        r = (k*G).x.num  # <2>
        k_inv = pow(k, N-2, N)  # <3>
        s = (z + r*self.secret) * k_inv % N  # <4>
        if s > N/2:  # <5>
            s = N - s
        return Signature(r, s) # <6>
----
<1> `randint` chooses a random integer from `[0,n)`.
Please don't use this function in production as the random number from this library is not nearly random enough.
<2> `r` is the x-coordinate of kG
<3> We use Fermat's Little Theorem again and `n`, which is prime
<4> s = (z+re)/k
<5> It turns out that using the low-s value will get nodes to relay our transactions easier.
This is for malleability reasons
<6> We return a `Signature` object from above.

.Importance of a unique `k`
****
There's an important rule in signatures that utilize a random component like we have here.
The `k` needs to be unique per signature.
That is, it cannot get reused.
In fact, a `k` that's reused will result in you revealing your secret!
This is because:

Our secret is `e`, we are reusing `k` to sign z~1~ and z~2~.

* kG=(r,y)
* s~1~ = (z~1~+re) / k, s~2~ = (z~2~+re) / k
* s~1~/s~2~ = (z~1~+re) / (z~2~+re)
* s~1~(z~2~+re) = s~2~(z~1~+re)
* s~1~z~2~ + s~1~re = s~2~z~1~ + s~2~re
* s~1~re - s~2~re = s~2~z~1~ - s~1~z~2~
* e = (s~2~z~1~ - s~1~z~2~) / (rs~1~ - rs~2~)

If anyone sees both signatures, they can use this formula and find our secret!
The Playstation 3 hack back in 2010 was due to the reuse of the `k` value in multiple signatures (https://arstechnica.com/gaming/2010/12/ps3-hacked-through-poor-implementation-of-cryptography/).

To combat this, there is a deterministic `k` generation standard which uses our secret and `z` to create a unique, deterministic `k` every time.
The specification is in RFC6979 (https://tools.ietf.org/html/rfc6979) and the code changes to look like this:

[source,python]
----
class PrivateKey:
...
include::code-ch03/ecc.py[tag=source14]
----
<1> We are using the deterministic `k` instead of a random one.
Everything else about `sign` remains the same.
<2> This algorithm returns a candidate that's suitable.

Deterministic `k` will be unique with very high probability.
This is because sha256 is collision-resistant and no collisions to date have been found.

Another benefit from a testing perspective is that the signature for a given `z` and the same private key will be the same every time.
This makes debugging much easier and unit tests a lot easier to write.
In addition, transactions which use deterministic `k` will create the same transaction every time as the signature will not change.
This makes transactions less malleable (more on that in <<chapter_segwit>>)

****

### Conclusion

We've covered Elliptic Curve Cryptography and we can now prove that we know a secret by signing something and we can also verify that the person with the secret actually signed a message.
Even if you don't read another page in this book, you've learned to implement what was once considered "weapons grade munitions" (see https://en.wikipedia.org/wiki/Export_of_cryptography_from_the_United_States).
This is a major step in your journey and will be essential for the rest of the book!

We now turn to serializing a lot of these structures so that we can store them on disk and send them over the network.
